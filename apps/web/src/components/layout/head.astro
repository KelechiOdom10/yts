---
import { ClientRouter } from "astro:transitions";
import { siteConfig } from "@yts/shared";

import "@fontsource/geist-sans/400.css";
import "@fontsource/geist-sans/500.css";
import "@fontsource/geist-sans/600.css";
import "@fontsource/geist-sans/700.css";
import "@fontsource/ibm-plex-sans-arabic/500.css";
import "@fontsource/ibm-plex-sans-arabic/600.css";
import "@fontsource/ibm-plex-sans-arabic/700.css";
import geistSans400 from "@fontsource/geist-sans/files/geist-sans-latin-400-normal.woff2";
import geistSans500 from "@fontsource/geist-sans/files/geist-sans-latin-500-normal.woff2";
import geistSans600 from "@fontsource/geist-sans/files/geist-sans-latin-600-normal.woff2";
import geistSans700 from "@fontsource/geist-sans/files/geist-sans-latin-700-normal.woff2";
import ibmPlexSansArabic500 from "@fontsource/ibm-plex-sans-arabic/files/ibm-plex-sans-arabic-latin-500-normal.woff2";
import ibmPlexSansArabic600 from "@fontsource/ibm-plex-sans-arabic/files/ibm-plex-sans-arabic-latin-600-normal.woff2";
import ibmPlexSansArabic700 from "@fontsource/ibm-plex-sans-arabic/files/ibm-plex-sans-arabic-latin-700-normal.woff2";

import "../../styles/global.css";

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title = siteConfig.title,
  description = siteConfig.description,
  image = "/nano.png",
} = Astro.props;

// Only allow theme toggling in app pages, force light mode elsewhere
const pathname = Astro.url.pathname;
const isInAppPath = pathname.startsWith("/app/");
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="manifest" href="/site.webmanifest" />
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
<meta name="msapplication-TileColor" content="#da532c" />
<meta name="theme-color" content="#ffffff" />
<link rel="manifest" href="/site.webmanifest" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link
  rel="preload"
  href={geistSans400}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={geistSans500}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={geistSans600}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={geistSans700}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={ibmPlexSansArabic500}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={ibmPlexSansArabic600}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={ibmPlexSansArabic700}
  as="font"
  type="font/woff2"
  crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ClientRouter />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", e =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]'
      ),
    ].forEach(link => link.remove())
  );
</script>

<script is:inline define:vars={{ isInAppPath }}>
  // Only allow theme toggling in app pages
  if (isInAppPath) {
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  } else {
    // Force light mode for non-app pages
    document.documentElement.classList.remove("dark");
  }
</script>
